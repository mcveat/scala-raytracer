* supersampling

+ 0.5h

val viewPlane = ViewPlane(800, 800)
val cameraPosition = Vector(500, viewPlane.height * 1.2, -1000)
Scene(
  Camera(
    position = cameraPosition,
    direction = (Vector(500, 0, 600) - cameraPosition).normalize,
    up = Vector(0, 1, 0).normalize,
    viewPlane,
    planeDistance = 1300
  ),
  List(
    Plane(Vector(0, 1, 0), 0, Textured(Texture.load("textures/chessboard.png"), 0.002, 0.002, 0.25, 0.7)),
    Sphere(Vector(500, 200, 400), 200, Solid(Color.dimGray, 0.8, 0.7))
  ),
  Light(cameraPosition, Color.white) ::
    (for (x <- 0.to(1000, 200)) yield Light(Vector(x, viewPlane.height * 1.5, 400), Color.white)).toList
)

without supersampling
---------------------

object Configuration {
  val IMG_WIDTH = 800
  val IMG_HEIGHT = 800
  val DIFFUSE_COEFFICIENT = 0.9
  val AMBIENT_COEFFICIENT = 0.1
  val TRACING_DEPTH = 5
  val SPECULAR_COEFFICIENT_POWER = 50
  val SUPERSAMPLING_FACTOR = 1
}

supersampled
------------
object Configuration {
  val IMG_WIDTH = 800
  val IMG_HEIGHT = 800
  val DIFFUSE_COEFFICIENT = 0.9
  val AMBIENT_COEFFICIENT = 0.1
  val TRACING_DEPTH = 5
  val SPECULAR_COEFFICIENT_POWER = 50
  val SUPERSAMPLING_FACTOR = 4
}
