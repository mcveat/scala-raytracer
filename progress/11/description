* textures on spheres

+ 1h

object Configuration {
  val WIDTH = 800
  val HEIGHT = 800
  val DIFFUSE_COEFFICIENT = 0.9
  val AMBIENT_COEFFICIENT = 0.1
  val TRACING_DEPTH = 5
  val SPECULAR_COEFFICIENT_POWER = 50
}

.1
--

val cameraPosition = Vector(500, HEIGHT * 2.3, -3000)
Scene(
  Camera(
    position = cameraPosition,
    direction = (Vector(500, 0, 1200) - cameraPosition).normalize,
    up = Vector(0, 1, 0).normalize,
    planeDistance = 1800
  ),
  List(
    Plane(Vector(0, 1, 0), 0, Textured(Texture.load("textures/chessboard.png"), 0.002, 0.002, 0.25, 0.7)),
    Sphere(Vector(500, 200, 400), 200, Textured(Texture.load("textures/marble.png"), 2, 2, 0, 0.7))
  ),
  (for (x <- 0.to(1000, 200)) yield Light(Vector(x, HEIGHT * 1.5, 400), Color.white)).toList :+
  Light(cameraPosition, Color.white)
)

.2
--

val cameraPosition = Vector(500, HEIGHT * 2.3, -3000)
Scene(
  Camera(
    position = cameraPosition,
    direction = (Vector(500, 0, 1200) - cameraPosition).normalize,
    up = Vector(0, 1, 0).normalize,
    planeDistance = 1800
  ),
  List(
    Plane(Vector(0, 1, 0), 0, Textured(Texture.load("textures/chessboard.png"), 0.002, 0.002, 0.25, 0.7)),
    Sphere(Vector(500, 200, 400), 200, Textured(Texture.load("textures/chessboard.png"), 8, 8, 0, 0.7))
  ),
  (for (x <- 0.to(1000, 200)) yield Light(Vector(x, HEIGHT * 1.5, 400), Color.white)).toList :+
  Light(cameraPosition, Color.white)
)
